"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Pescador;

var _react = _interopRequireWildcard(require("react"));

var _gsap = _interopRequireWildcard(require("gsap"));

var _Square = _interopRequireDefault(require("./Icons/Square"));

var _Triangle = _interopRequireDefault(require("./Icons/Triangle"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var STROKE_WIDTH = 0.9;
var POINTS = "0,0 60,30 0,60 0,30";
var DURATIONS = [0.6, 1.3];
var RADIUS = 50;
var INIT_RADIUS = 10;
var SQUARE_SIZE = 20;
var TRIANGLE_SIZE = 15;
var TIMELINE = null;
var ease = _gsap.Power4.easeOut;

function Pescador(_ref) {
  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? 400 : _ref$size,
      delay = _ref.delay,
      repeatDelay = _ref.repeatDelay,
      repeat = _ref.repeat,
      style = _ref.style,
      onComplete = _ref.onComplete,
      onStart = _ref.onStart,
      onRepeat = _ref.onRepeat,
      className = _ref.className;
  var squareRef = (0, _react.useRef)();
  var triangleRefs = (0, _react.useRef)(_toConsumableArray(Array(3)).map(function () {
    return (0, _react.createRef)();
  }));
  var polygonRefs = (0, _react.useRef)(_toConsumableArray(Array(3)).map(function () {
    return (0, _react.createRef)();
  }));
  var lineRefs = (0, _react.useRef)(_toConsumableArray(Array(3)).map(function () {
    return (0, _react.createRef)();
  }));

  var _useState = (0, _react.useState)(size),
      _useState2 = _slicedToArray(_useState, 2),
      prevSize = _useState2[0],
      setPrevSize = _useState2[1];

  var _useState3 = (0, _react.useState)(0),
      _useState4 = _slicedToArray(_useState3, 2),
      prevDelay = _useState4[0],
      setPrevDelay = _useState4[1];

  var _useState5 = (0, _react.useState)(0),
      _useState6 = _slicedToArray(_useState5, 2),
      prevRepeatDelay = _useState6[0],
      setPrevRepeatDelay = _useState6[1];

  var _useState7 = (0, _react.useState)(0),
      _useState8 = _slicedToArray(_useState7, 2),
      prevRepeat = _useState8[0],
      setPrevRepeat = _useState8[1];

  var center = prevSize / 2;
  var angle = 2 * Math.PI / 3;
  var prefixAngle = Math.PI / 6;
  var radius = prevSize * RADIUS / 100;
  var initRadius = prevSize * INIT_RADIUS / 100;
  var square = SQUARE_SIZE * prevSize / 100;
  var strokeWidth = prevSize * STROKE_WIDTH / 100;
  var dasharray = (0, _react.useCallback)(function (array) {
    return array.map(function (item) {
      return square * 2 * item / 100;
    }).reduce(function (sum, item) {
      return "".concat(sum, " ").concat(item);
    }, "");
  }, [square]);
  var animateSquare = (0, _react.useCallback)(function () {
    var timeline = _gsap["default"].timeline();

    var startDasharray = dasharray([25, 75]);
    var endDashArray = dasharray([0, 100]);
    timeline.set(squareRef.current, {
      strokeDashoffset: 0,
      strokeDasharray: startDasharray
    });
    timeline.to(squareRef.current, {
      keyframes: [{
        strokeDashoffset: square * 4,
        duration: 1.2
      }, {
        strokeDasharray: endDashArray,
        duration: 0.2
      }],
      ease: _gsap.Power4.easeOut
    });
    return timeline;
  }, [dasharray, square]);
  var animateTriangles = (0, _react.useCallback)(function () {
    var timelines = [];
    triangleRefs.current.forEach(function (ref, i) {
      var timeline = _gsap["default"].timeline({
        ease: ease
      });

      var x = Math.cos(-prefixAngle + i * angle);
      var y = Math.sin(-prefixAngle + i * angle);
      var size = TRIANGLE_SIZE / 2 * prevSize / 100;
      timeline.set(ref.current, {
        rotate: (angle * i - prefixAngle) * 180 / Math.PI
      });
      timeline.fromTo(ref.current, 1, {
        scale: 0
      }, {
        scale: 1,
        transformOrigin: "center",
        ease: _gsap.Power4.easeInOut
      });
      timeline.fromTo(ref.current, 1, {
        x: -size,
        y: -size
      }, {
        x: radius * x - size,
        y: radius * y - size,
        ease: _gsap.Power4.easeInOut
      }, "-=1");
      timeline.to(ref.current, 1, {
        scale: 0,
        ease: _gsap.Power4.easeOut
      }, "-=0.4");
      timelines.push(timeline);
    });
    return timelines;
  }, [angle, prefixAngle, prevSize, radius]);
  var animateLines = (0, _react.useCallback)(function () {
    var timelines = [];
    lineRefs.current.forEach(function (ref, i) {
      var timeline = _gsap["default"].timeline();

      var cos = Math.cos(prefixAngle + i * angle);
      var sin = Math.sin(prefixAngle + i * angle);
      timeline.fromTo(ref.current, DURATIONS[0], {
        attr: {
          x1: center + initRadius * cos,
          y1: center + initRadius * sin
        }
      }, {
        attr: {
          x1: center + radius * cos,
          y1: center + radius * sin
        },
        ease: ease
      }).fromTo(ref.current, DURATIONS[1], {
        attr: {
          x2: center + initRadius * cos,
          y2: center + initRadius * sin
        }
      }, {
        attr: {
          x2: center + radius * cos,
          y2: center + radius * sin
        },
        ease: ease
      }, "-=".concat(DURATIONS[0]));
      timelines.push(timeline);
    });
    return timelines;
  }, [angle, center, initRadius, prefixAngle, radius]);
  var animatePolygonShape = (0, _react.useCallback)(function () {
    var timelines = [];
    polygonRefs.current.forEach(function (ref) {
      var timeline = _gsap["default"].timeline();

      timeline.fromTo(ref.current, 1, {
        attr: {
          points: POINTS
        }
      }, {
        attr: {
          points: "0,0 60,30 0,60 30,30"
        },
        ease: ease
      });
      timelines.push(timeline);
    });
    return timelines;
  }, []);
  var explode = (0, _react.useCallback)(function () {
    var squareTimeline = animateSquare();
    var triangleTimelines = animateTriangles();
    var polygonTimelines = animatePolygonShape();
    var lineTimelines = animateLines();
    TIMELINE = _gsap["default"].timeline({
      repeat: prevRepeat,
      delay: prevDelay,
      repeatDelay: prevRepeatDelay,
      onStart: onStart,
      onComplete: onComplete,
      onRepeat: onRepeat
    });
    TIMELINE.add(squareTimeline, 0);
    TIMELINE.add(triangleTimelines, "-=0.8");
    TIMELINE.add(polygonTimelines, "-=1");
    TIMELINE.add(lineTimelines, "<");
  }, [prevRepeat, prevRepeatDelay, prevDelay, onStart, onComplete, onRepeat, animateSquare, animateTriangles, animatePolygonShape, animateLines]);
  (0, _react.useEffect)(function () {
    if (TIMELINE) TIMELINE.kill();
    explode();
  }, [explode]);
  (0, _react.useEffect)(function () {
    setPrevSize(size);
    setPrevDelay(delay);
    setPrevRepeatDelay(repeatDelay);
    setPrevRepeat(repeat);
  }, [size, delay, repeatDelay, repeat]);
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: className,
    style: _objectSpread({
      width: prevSize,
      height: prevSize,
      position: "relative"
    }, style)
  }, /*#__PURE__*/_react["default"].createElement(_Square["default"], {
    shapeRef: squareRef,
    width: "".concat(SQUARE_SIZE, "%"),
    height: "".concat(SQUARE_SIZE, "%"),
    strokeWidth: strokeWidth,
    strokeDasharray: "30 90",
    strokeDashoffset: 0,
    color: "#fed766",
    style: {
      position: "absolute",
      top: "50%",
      left: "50%",
      transform: "translate(-50%, -50%) rotate(45deg)"
    }
  }), /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, Array.from(Array(3)).map(function (_, idx) {
    return /*#__PURE__*/_react["default"].createElement(_Triangle["default"], {
      key: idx,
      points: POINTS,
      ref: triangleRefs.current[idx],
      shapeRef: polygonRefs.current[idx],
      color: "#FF4D4D",
      style: {
        position: "absolute",
        top: "50%",
        left: "50%",
        width: "".concat(TRIANGLE_SIZE, "%"),
        height: "".concat(TRIANGLE_SIZE, "%"),
        transform: "\n                translate(-50%, -50%)\n                rotate(".concat(angle * 180 / Math.PI * idx - 30, "deg)\n                scale(0)\n              ")
      }
    });
  })), /*#__PURE__*/_react["default"].createElement("svg", {
    width: prevSize,
    height: prevSize
  }, Array.from(Array(3)).map(function (_, idx) {
    return /*#__PURE__*/_react["default"].createElement("line", {
      key: idx,
      x1: center,
      x2: center,
      y1: center,
      y2: center,
      ref: lineRefs.current[idx],
      stroke: "#fff",
      strokeWidth: strokeWidth
    });
  })));
}