"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Lubang;

var _react = _interopRequireWildcard(require("react"));

var _gsap = _interopRequireWildcard(require("gsap"));

var _CurveLine = _interopRequireDefault(require("./Icons/CurveLine"));

var _Circle = _interopRequireDefault(require("./Icons/Circle"));

var _Square = _interopRequireDefault(require("./Icons/Square"));

var _Triangle = _interopRequireDefault(require("./Icons/Triangle"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var TIME_LINE = null;
var RADIUSES = [9, 10, 11, 12];
var CIRCLE_SIZE = 10;
var SHAPE_SIZE = 5;
var STROKE_WIDTH = 0.5;
var shapes = [_Square["default"], _Triangle["default"], _Circle["default"], _Triangle["default"]];

function Lubang(_ref) {
  var size = _ref.size,
      delay = _ref.delay,
      repeatDelay = _ref.repeatDelay,
      repeat = _ref.repeat,
      style = _ref.style,
      onComplete = _ref.onComplete,
      onStart = _ref.onStart,
      onRepeat = _ref.onRepeat,
      className = _ref.className;
  var curveLiveRef = (0, _react.useRef)();
  var circleRef = (0, _react.useRef)();
  var shapesRefs = (0, _react.useRef)(_toConsumableArray(Array(4)).map(function () {
    return {
      outer: (0, _react.createRef)(),
      inner: (0, _react.createRef)()
    };
  }));
  var squareRefs = (0, _react.useRef)(_toConsumableArray(Array(3)).map(function () {
    return {
      inner: (0, _react.createRef)(),
      outer: (0, _react.createRef)()
    };
  }));

  var _useState = (0, _react.useState)(size),
      _useState2 = _slicedToArray(_useState, 2),
      prevSize = _useState2[0],
      setPrevSize = _useState2[1];

  var _useState3 = (0, _react.useState)(0),
      _useState4 = _slicedToArray(_useState3, 2),
      prevDelay = _useState4[0],
      setPrevDelay = _useState4[1];

  var _useState5 = (0, _react.useState)(0),
      _useState6 = _slicedToArray(_useState5, 2),
      prevRepeatDelay = _useState6[0],
      setPrevRepeatDelay = _useState6[1];

  var _useState7 = (0, _react.useState)(0),
      _useState8 = _slicedToArray(_useState7, 2),
      prevRepeat = _useState8[0],
      setPrevRepeat = _useState8[1]; // animate curve line:


  var animateCurveLine = (0, _react.useCallback)(function () {
    var timeline = _gsap["default"].timeline();

    timeline.set(curveLiveRef.current, {
      attr: {
        "stroke-dasharray": "0 228",
        "stroke-dashoffset": 0,
        "stroke-width": 0
      }
    });
    timeline.to(curveLiveRef.current, 0.3, {
      attr: {
        "stroke-width": 1
      }
    });
    timeline.to(curveLiveRef.current, {
      keyframes: [{
        attr: {
          "stroke-dasharray": "60 168",
          "stroke-dashoffset": -40
        },
        duration: 1
      }, {
        attr: {
          "stroke-dasharray": "0 227",
          "stroke-dashoffset": -227
        },
        duration: 0.5
      }],
      ease: _gsap.Power4.easeInOut
    }, "-=0.3");
    timeline.to(curveLiveRef.current, 0.6, {
      attr: {
        "stroke-width": 0
      },
      ease: _gsap.Power4.easeInOut
    }, "-=0.5");
    return timeline;
  }, []); // animate shapes:

  var animateShapes = (0, _react.useCallback)(function () {
    var timelines = [];
    shapesRefs.current.forEach(function (_ref2, i) {
      var outer = _ref2.outer,
          inner = _ref2.inner;

      var timeline = _gsap["default"].timeline({
        delay: i * 0.08
      });

      var cos = Math.cos(Math.PI / 2 * i);
      var sin = Math.sin(Math.PI / 2 * i);
      var size = SHAPE_SIZE / 2 * prevSize / 100;
      var radiuses = RADIUSES.map(function (radius) {
        return prevSize * radius / 100;
      });
      timeline.fromTo(outer.current, 0.7, {
        x: -size,
        y: -size,
        scale: 0
      }, {
        x: "".concat(-size + radiuses[i] * cos),
        y: "".concat(-size + radiuses[i] * sin),
        scale: 1,
        ease: _gsap.Power4.easeOut
      });
      timeline.fromTo(outer.current, 0.7, {
        rotation: 0
      }, {
        rotation: 200 * (i % 2 ? 1 : -1),
        transformOrigin: "50% 50%",
        ease: _gsap.Expo.easeOut
      }, "-=0.6");
      timeline.fromTo(inner.current, 0.5, {
        attr: {
          "stroke-width": 4
        }
      }, {
        attr: {
          "stroke-width": 0
        },
        ease: _gsap.Power4.easeOut
      }, "-=0.5");
      timeline.fromTo(inner.current, 0.3, {
        opacity: 1
      }, {
        opacity: 0,
        ease: _gsap.Power4.easeOut
      }, "-=0.1");
      timelines.push(timeline);
    });
    return timelines;
  }, [prevSize]); // animate sqaures

  var animateSquares = (0, _react.useCallback)(function () {
    var timelines = [];
    squareRefs.current.forEach(function (_ref3, i) {
      var inner = _ref3.inner,
          outer = _ref3.outer;

      var timeline = _gsap["default"].timeline({
        delay: i * 0.05
      });

      var cos = Math.cos(2 * Math.PI / 3 * i);
      var sin = Math.sin(2 * Math.PI / 3 * i);
      var size = SHAPE_SIZE / 2 * prevSize / 100;
      var radiuses = RADIUSES.map(function (radius) {
        return prevSize * radius / 100;
      });
      timeline.fromTo(outer.current, 0.7, {
        x: -size,
        y: -size,
        scale: 0
      }, {
        x: "".concat(-size + radiuses[i] * cos),
        y: "".concat(-size + radiuses[i] * sin),
        scale: 1,
        ease: _gsap.Power4.easeOut
      });
      timeline.fromTo(outer.current, 0.5, {
        rotation: 0
      }, {
        rotation: 200 * (i % 2 ? 1 : -1),
        transformOrigin: "50% 50%",
        ease: _gsap.Power4.easeOut
      }, "-=0.6");
      timeline.fromTo(inner.current, 0.5, {
        attr: {
          "stroke-width": 4
        }
      }, {
        attr: {
          "stroke-width": 0
        },
        ease: _gsap.Power4.easeOut
      }, "-=0.4");
      timeline.fromTo(outer.current, 0.3, {
        opacity: 1
      }, {
        opacity: 0,
        ease: _gsap.Power4.easeOut
      }, "-=0.4");
      timelines.push(timeline);
    });
    return timelines;
  }, [prevSize]); // animate circle

  var animateCircle = (0, _react.useCallback)(function () {
    var timeline = _gsap["default"].timeline();

    var strokeWidth = prevSize * STROKE_WIDTH / 100;
    timeline.set(circleRef.current, {
      attr: {
        "stroke-width": 15,
        opacity: 1
      }
    });
    timeline.fromTo(circleRef.current, 0.5, {
      attr: {
        r: 0,
        "stroke-width": 15
      }
    }, {
      attr: {
        r: "45%",
        "stroke-width": strokeWidth
      },
      ease: _gsap.Power4.easeOut
    });
    timeline.to(circleRef.current, 0.5, {
      attr: {
        "stroke-width": 0
      },
      ease: _gsap.Power4.easeOut
    }, "-=0.5");
    timeline.fromTo(circleRef.current, 0.5, {
      opacity: 1
    }, {
      opacity: 0
    }, "-=0.4");
    return timeline;
  }, [prevSize]);
  var explode = (0, _react.useCallback)(function () {
    var curveLineTL = animateCurveLine();
    var shapesTimlines = animateShapes();
    var squaresTimlines = animateSquares();
    var circleTimeline = animateCircle();
    TIME_LINE = _gsap["default"].timeline({
      repeat: prevRepeat,
      delay: prevDelay,
      repeatDelay: prevRepeatDelay,
      onStart: onStart,
      onComplete: onComplete,
      onRepeat: onRepeat
    });
    TIME_LINE.add(curveLineTL);
    TIME_LINE.add(shapesTimlines, 0.6);
    TIME_LINE.add(squaresTimlines, 0.9);
    TIME_LINE.add(circleTimeline, 1.2);
  }, [prevRepeat, prevDelay, prevRepeatDelay, onComplete, onStart, onRepeat, animateShapes, animateCurveLine, animateCircle, animateSquares]);
  (0, _react.useEffect)(function () {
    if (TIME_LINE) TIME_LINE.kill();
    explode();
  }, [explode]);
  (0, _react.useEffect)(function () {
    setPrevSize(size);
    setPrevDelay(delay);
    setPrevRepeatDelay(repeatDelay);
    setPrevRepeat(repeat);
  }, [size, delay, repeatDelay, repeat]);
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: className,
    style: _objectSpread({
      width: size,
      height: size,
      position: "relative"
    }, style)
  }, /*#__PURE__*/_react["default"].createElement(_CurveLine["default"], {
    width: prevSize,
    height: prevSize,
    ref: curveLiveRef,
    strokeDasharray: "0 228",
    strokeWidth: 1,
    color: "#fed766"
  }), shapes.map(function (Shape, i) {
    return /*#__PURE__*/_react["default"].createElement(Shape, {
      key: i,
      ref: shapesRefs.current[i].outer,
      shapeRef: shapesRefs.current[i].inner,
      width: "".concat(SHAPE_SIZE - SHAPE_SIZE * i * 0.1, "%"),
      height: "".concat(SHAPE_SIZE - SHAPE_SIZE * i * 0.1, "%"),
      strokeWidth: 4,
      style: {
        position: "absolute",
        left: "25%",
        top: "40%",
        transform: "translate(-50%, -50%)"
      },
      color: ["#88d8b0", "#ffeead", "#ff6f69", "#ffcc5c"][i],
      border: true
    });
  }), squareRefs.current.map(function (_ref4, i) {
    var inner = _ref4.inner,
        outer = _ref4.outer;
    return /*#__PURE__*/_react["default"].createElement(_Square["default"], {
      key: i,
      ref: outer,
      shapeRef: inner,
      width: "".concat(SHAPE_SIZE - SHAPE_SIZE * i * 0.1, "%"),
      height: "".concat(SHAPE_SIZE - SHAPE_SIZE * i * 0.1, "%"),
      strokeWidth: 4,
      color: ["#88d8b0", "#ffeead", "#ff6f69"][i],
      style: {
        position: "absolute",
        left: "74%",
        top: "36%",
        transform: "translate(-50%, -50%)"
      }
    });
  }), /*#__PURE__*/_react["default"].createElement(_Circle["default"], {
    shapeRef: circleRef,
    width: "".concat(CIRCLE_SIZE, "%"),
    height: "".concat(CIRCLE_SIZE, "%"),
    radius: 0,
    strokeWidth: 2.5,
    color: "#2ab7ca",
    style: {
      position: "absolute",
      left: "99%",
      top: "24.5%",
      transform: "translate(-50%, -50%)"
    }
  }));
}