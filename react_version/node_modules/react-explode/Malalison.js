"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Malalison;

var _react = _interopRequireWildcard(require("react"));

var _gsap = _interopRequireWildcard(require("gsap"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var PATHS = [];
var DEGREE = 90 * Math.PI / 180;
var INIT_EXPLOSION = 4;
var GAP = 7;
var STROKE_WIDTH = 0.5;
var TIMELINE = null;

function Malalison(_ref) {
  var size = _ref.size,
      delay = _ref.delay,
      repeatDelay = _ref.repeatDelay,
      repeat = _ref.repeat,
      style = _ref.style,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? "white" : _ref$color,
      onComplete = _ref.onComplete,
      onStart = _ref.onStart,
      onRepeat = _ref.onRepeat,
      className = _ref.className;

  var _useState = (0, _react.useState)(200),
      _useState2 = _slicedToArray(_useState, 2),
      prevSize = _useState2[0],
      setPrevSize = _useState2[1];

  var _useState3 = (0, _react.useState)(0),
      _useState4 = _slicedToArray(_useState3, 2),
      prevDelay = _useState4[0],
      setPrevDelay = _useState4[1];

  var _useState5 = (0, _react.useState)(0),
      _useState6 = _slicedToArray(_useState5, 2),
      prevRepeatDelay = _useState6[0],
      setPrevRepeatDelay = _useState6[1];

  var _useState7 = (0, _react.useState)(0),
      _useState8 = _slicedToArray(_useState7, 2),
      prevRepeat = _useState8[0],
      setPrevRepeat = _useState8[1];

  var center = prevSize / 2;
  var explode = (0, _react.useCallback)(function () {
    var center = prevSize / 2;
    var ease = _gsap.Circ.easeInOut;
    var offset = INIT_EXPLOSION * 2;
    var timelines = [];

    for (var i = 0; i < PATHS.length; i++) {
      var path = PATHS[i];
      var j = Math.floor((i - offset) / INIT_EXPLOSION + 1);
      var length = center - (i >= offset ? center * (j / 15) : 0);
      var degree = (i < INIT_EXPLOSION ? 0 : DEGREE / 2) + DEGREE * i;
      var xPercent = Math.cos(degree);
      var yPercent = Math.sin(degree);
      var xOffset = (i < INIT_EXPLOSION ? GAP : 0) * Math.cos(DEGREE * i);
      var yOffset = (i < INIT_EXPLOSION ? GAP : 0) * Math.sin(DEGREE * i);
      var X = center + length * xPercent;
      var Y = center + length * yPercent;

      var timeline = _gsap["default"].timeline({
        delay: i < INIT_EXPLOSION ? 0 : 0.2
      });

      timeline.fromTo(path, 0.7, {
        attr: {
          x2: center,
          y2: center
        },
        ease: ease
      }, {
        attr: {
          x2: X,
          y2: Y
        },
        ease: ease
      });
      timeline.fromTo(path, 0.7, {
        attr: {
          x1: center + xOffset,
          y1: center + yOffset
        },
        ease: ease
      }, {
        attr: {
          x1: X,
          y1: Y
        },
        ease: ease
      }, "-=0.5");

      if (i >= offset) {
        var transformOrigin = "".concat(xPercent >= 0 ? 0 : 100, "% ").concat(yPercent >= 0 ? 0 : 100, "%");
        timeline.fromTo(path, 0.5, {
          rotation: 0
        }, {
          rotation: 90 * (j / 10),
          transformOrigin: transformOrigin,
          ease: ease
        }, "-=0.7");
      }

      timelines.push(timeline);
    }

    TIMELINE = _gsap["default"].timeline({
      delay: prevDelay,
      repeat: prevRepeat,
      repeatDelay: prevRepeatDelay,
      onStart: onStart,
      onComplete: onComplete,
      onRepeat: onRepeat
    });
    TIMELINE.add(timelines);
  }, [prevSize, prevDelay, prevRepeat, prevRepeatDelay, onStart, onComplete, onRepeat]);
  (0, _react.useEffect)(function () {
    if (TIMELINE) TIMELINE.kill();
  });
  (0, _react.useEffect)(function () {
    setPrevSize(size);
    setPrevDelay(delay);
    setPrevRepeatDelay(repeatDelay);
    setPrevRepeat(repeat);
  }, [size, delay, repeatDelay, repeat]);
  (0, _react.useEffect)(function () {
    explode();
  }, [explode]);
  return /*#__PURE__*/_react["default"].createElement("svg", {
    width: prevSize,
    height: prevSize,
    style: _objectSpread({}, style, {
      position: "relative"
    }),
    className: className
  }, _toConsumableArray(Array(64)).map(function (_, i) {
    return /*#__PURE__*/_react["default"].createElement("line", {
      key: i,
      x1: center + (i < INIT_EXPLOSION ? GAP : 0) * Math.cos(DEGREE * i),
      y1: center + (i < INIT_EXPLOSION ? GAP : 0) * Math.sin(DEGREE * i),
      x2: center,
      y2: center,
      stroke: color,
      strokeWidth: Math.ceil(prevSize * STROKE_WIDTH / 100),
      ref: function ref(el) {
        return PATHS[i] = el;
      }
    });
  }));
}