"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Luzon;

var _react = _interopRequireWildcard(require("react"));

var _gsap = _interopRequireWildcard(require("gsap"));

var _ZigzagSine = _interopRequireWildcard(require("./Icons/ZigzagSine"));

var _HeartLine = _interopRequireWildcard(require("./Icons/HeartLine"));

var _Circle = _interopRequireDefault(require("./Icons/Circle"));

var _SineWave = _interopRequireWildcard(require("./Icons/SineWave"));

var _useGSAPAnimateStroke = _interopRequireDefault(require("./hooks/useGSAPAnimateStroke"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var SINE_WAVE_LENGTH = 25;
var SINE_WAVE_SIZE = 50;
var ZIGZAG_SIZE = 80;
var ZIGZAG_STROKE_WIDTH = 0.24;
var CIRCLE_STROKE_WIDTH = 0.35;
var HEART_LINE_SIZE = 50;
var HEART_LINE_STROKE_WIDTHS = [0.25, 0.1];
var TIME_LINE;

function Luzon(_ref) {
  var size = _ref.size,
      delay = _ref.delay,
      repeatDelay = _ref.repeatDelay,
      repeat = _ref.repeat,
      style = _ref.style,
      onComplete = _ref.onComplete,
      onStart = _ref.onStart,
      onRepeat = _ref.onRepeat,
      className = _ref.className;
  var circleRefs = (0, _react.useRef)(_toConsumableArray(Array(2)).map(function () {
    return (0, _react.createRef)();
  }));
  var waveRefs = (0, _react.useRef)(_toConsumableArray(Array(4)).map(function () {
    return (0, _react.createRef)();
  }));
  var zigzagRefs = (0, _react.useRef)(_toConsumableArray(Array(3)).map(function () {
    return (0, _react.createRef)();
  }));
  var heartLineRefs = (0, _react.useRef)(_toConsumableArray(Array(4)).map(function () {
    return (0, _react.createRef)();
  }));

  var _useState = (0, _react.useState)(size),
      _useState2 = _slicedToArray(_useState, 2),
      prevSize = _useState2[0],
      setPrevSize = _useState2[1];

  var _useState3 = (0, _react.useState)(0),
      _useState4 = _slicedToArray(_useState3, 2),
      prevDelay = _useState4[0],
      setPrevDelay = _useState4[1];

  var _useState5 = (0, _react.useState)(0),
      _useState6 = _slicedToArray(_useState5, 2),
      prevRepeatDelay = _useState6[0],
      setPrevRepeatDelay = _useState6[1];

  var _useState7 = (0, _react.useState)(0),
      _useState8 = _slicedToArray(_useState7, 2),
      prevRepeat = _useState8[0],
      setPrevRepeat = _useState8[1];

  var zigzagStrokeWidth = (0, _react.useMemo)(function () {
    return prevSize * ZIGZAG_STROKE_WIDTH / 100;
  }, [prevSize]);
  var HeartLineStrokeWidths = (0, _react.useMemo)(function () {
    return HEART_LINE_STROKE_WIDTHS.map(function (sw) {
      return prevSize * sw / 100;
    });
  }, [prevSize]);
  var sineWaveLength = (0, _react.useMemo)(function () {
    return SINE_WAVE_LENGTH * prevSize / 100;
  }, [prevSize]);
  var animateSineWaveStroke = (0, _useGSAPAnimateStroke["default"])({
    length: 100,
    totalLength: _SineWave.length,
    speed: 1.2
  });
  var animateZigzag = (0, _react.useCallback)(function () {
    var timelines = [];
    zigzagRefs.current.forEach(function (ref, i) {
      var timeline = _gsap["default"].timeline({
        delay: 0.04 * i
      });

      timeline.set(ref.current, {
        attr: {
          "stroke-dasharray": "0 ".concat(_ZigzagSine.length),
          "stroke-dashoffset": 0,
          "stroke-width": 0
        }
      });
      timeline.fromTo(ref.current, 0.2, {
        attr: {
          "stroke-width": 0
        }
      }, {
        attr: {
          "stroke-width": zigzagStrokeWidth
        }
      });
      timeline.fromTo(ref.current, 0.6, {
        attr: {
          "stroke-dasharray": "0 ".concat(_ZigzagSine.length),
          "stroke-dashoffset": 0
        }
      }, {
        attr: {
          "stroke-dasharray": "50 ".concat(_ZigzagSine.length - 50),
          "stroke-dashoffset": -20
        },
        ease: _gsap.Power4.easeIn
      }, "-=0.2");
      timeline.to(ref.current, 0.5, {
        attr: {
          "stroke-dasharray": "0 ".concat(_ZigzagSine.length),
          "stroke-dashoffset": _ZigzagSine.length * -1
        },
        ease: _gsap.Power4.easeOut
      });
      timeline.to(ref.current, 0.3, {
        attr: {
          "stroke-width": 0
        },
        ease: _gsap.Power4.easeInOut
      }, "-=0.3");
      timelines.push(timeline);
    });
    return timelines;
  }, [zigzagStrokeWidth]);
  var animateCircle = (0, _react.useCallback)(function () {
    var timelines = [];
    var strokeWidth = prevSize * CIRCLE_STROKE_WIDTH / 100;
    circleRefs.current.forEach(function (ref, i) {
      if (i === 1) {
        var timeline = _gsap["default"].timeline();

        timeline.set(ref.current, {
          scale: 0,
          opacity: 1,
          attr: {
            "stroke-width": 20
          }
        });
        timeline.fromTo(ref.current, 0.7, {
          scale: 0,
          transformOrigin: "center",
          attr: {
            "stroke-width": 20
          }
        }, {
          scale: 1,
          attr: {
            "stroke-width": strokeWidth
          },
          ease: _gsap.Power4.easeInOut
        });
        timeline.to(ref.current, 0.7, {
          scale: 0.7,
          transformOrigin: "center",
          attr: {
            "stroke-width": 0
          },
          opacity: 0,
          ease: _gsap.Power4.easeInOut
        }, "-=0.1");
        timelines.push(timeline);
      } else {
        var _timeline = _gsap["default"].timeline({
          delay: 0.45
        });

        _timeline.set(ref.current, {
          attr: {
            "stroke-width": 20
          },
          scale: 0
        });

        _timeline.set(ref.current, {
          opacity: 1
        });

        _timeline.fromTo(ref.current, 0.8, {
          scale: 0,
          transformOrigin: "center"
        }, {
          scale: 0.8,
          ease: _gsap.Power4.easeInOut
        });

        _timeline.to(ref.current, 1, {
          scale: 1.1,
          attr: {
            "stroke-width": 0
          },
          ease: _gsap.Power4.easeInOut
        }, "-=0.8");

        _timeline.fromTo(ref.current, 0.3, {
          opacity: 1
        }, {
          opacity: 0,
          ease: _gsap.Power4.easeInOut
        }, "-=0.3");

        timelines.push(_timeline);
      }
    });
    return timelines;
  }, [prevSize]);
  var animateSineWaves = (0, _react.useCallback)(function () {
    var timelines = [];
    waveRefs.current.forEach(function (ref) {
      var timeline = _gsap["default"].timeline();

      animateSineWaveStroke({
        elem: ref.current,
        strokeWidth: 1,
        timeline: timeline
      });
      timelines.push(timeline);
    });
    return timelines;
  }, [animateSineWaveStroke]);
  var animateHeartLines = (0, _react.useCallback)(function () {
    var timelines = [];
    heartLineRefs.current.forEach(function (ref, i) {
      var timeline = _gsap["default"].timeline({
        delay: i % 2 * 0.05
      });

      timeline.set(ref.current, {
        attr: {
          "stroke-dasharray": "0 ".concat(_HeartLine.length),
          "stroke-dashoffset": 0
        }
      });
      timeline.fromTo(ref.current, 0.6, {
        attr: {
          "stroke-dasharray": "0 ".concat(_HeartLine.length),
          "stroke-dashoffset": 0
        }
      }, {
        attr: {
          "stroke-dasharray": "80 ".concat(_HeartLine.length - 80),
          "stroke-dashoffset": -20
        },
        ease: _gsap.Power4.easeIn
      });
      timeline.to(ref.current, 0.5, {
        attr: {
          "stroke-dasharray": "0 ".concat(_HeartLine.length),
          "stroke-dashoffset": _HeartLine.length * -1
        },
        ease: _gsap.Power4.easeOut
      });
      timelines.push(timeline);
    });
    return timelines;
  }, []);
  var explode = (0, _react.useCallback)(function () {
    var zizagTimelines = animateZigzag();
    var circleTimelines = animateCircle();
    var sineWavesTimelines = animateSineWaves();
    var heartLinesTimelines = animateHeartLines();
    TIME_LINE = _gsap["default"].timeline({
      repeat: prevRepeat,
      delay: prevDelay,
      repeatDelay: prevRepeatDelay,
      onStart: onStart,
      onComplete: onComplete,
      onRepeat: onRepeat
    });
    TIME_LINE.add(zizagTimelines, 0);
    TIME_LINE.add(circleTimelines, 0.2);
    TIME_LINE.add(sineWavesTimelines, 0.7);
    TIME_LINE.add(heartLinesTimelines, 0.6);
  }, [prevRepeat, prevDelay, prevRepeatDelay, onComplete, onStart, onRepeat, animateZigzag, animateCircle, animateSineWaves, animateHeartLines]);
  (0, _react.useEffect)(function () {
    if (TIME_LINE) TIME_LINE.kill();
    explode();
  }, [explode]);
  (0, _react.useEffect)(function () {
    setPrevSize(size);
    setPrevDelay(delay);
    setPrevRepeatDelay(repeatDelay);
    setPrevRepeat(repeat);
  }, [size, delay, repeatDelay, repeat]);
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: className,
    style: _objectSpread({
      width: prevSize,
      height: prevSize,
      position: "relative"
    }, style)
  }, zigzagRefs.current.map(function (ref, i) {
    return /*#__PURE__*/_react["default"].createElement(_ZigzagSine["default"], {
      key: i,
      shapeRef: ref,
      width: "".concat(ZIGZAG_SIZE, "%"),
      height: "".concat(ZIGZAG_SIZE, "%"),
      strokeWidth: "0",
      dasharray: "0 ".concat(_ZigzagSine.length),
      color: "#fed766",
      style: {
        position: "absolute",
        top: "".concat(50 + 6 * i - 2 * 6 / 2, "%"),
        left: "50%",
        transform: "translate(-50%, -50%)"
      }
    });
  }), heartLineRefs.current.map(function (ref, i) {
    return /*#__PURE__*/_react["default"].createElement(_HeartLine["default"], {
      key: i,
      shapeRef: ref,
      strokeWidth: HeartLineStrokeWidths[i % 2],
      width: "".concat(HEART_LINE_SIZE, "%"),
      height: "".concat(HEART_LINE_SIZE, "%"),
      dasharray: "0 ".concat(_HeartLine.length),
      color: ["#fe4a49", "#2ab7ca"][i % 2],
      style: {
        position: "absolute",
        top: "32.5%",
        left: "50%",
        transformOrigin: "3% 32.5%",
        transform: "\n                rotate(".concat(Math.floor(i / 2) * 180 - 3 * i, "deg)\n            ")
      }
    });
  }), waveRefs.current.map(function (ref, i) {
    return /*#__PURE__*/_react["default"].createElement(_SineWave["default"], {
      key: i,
      shapeRef: ref,
      color: "#fed766",
      width: "".concat(SINE_WAVE_SIZE, "%"),
      height: "4%",
      style: {
        position: "absolute",
        top: "50%",
        left: "50%",
        transformOrigin: "0 0",
        transform: "rotate(".concat(Math.floor(i / 2) * 180 - 2 * 10 / 2 + i % 2 * 10, "deg)")
      },
      dasharray: "0 ".concat(_SineWave.length)
    });
  }), circleRefs.current.map(function (ref, i) {
    return /*#__PURE__*/_react["default"].createElement(_Circle["default"], {
      key: i,
      shapeRef: ref,
      radius: "15%",
      width: prevSize,
      height: prevSize,
      color: ["#2ab7ca", "#fe4a49"][i],
      style: {
        position: "absolute",
        top: "50%",
        left: "50%",
        transform: "translate(-50%, -50%)"
      }
    });
  }));
}