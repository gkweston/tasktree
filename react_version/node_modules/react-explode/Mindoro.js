"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Mindoro;

var _react = _interopRequireWildcard(require("react"));

var _gsap = _interopRequireWildcard(require("gsap"));

var _Seahorse = _interopRequireWildcard(require("./Icons/Seahorse"));

var _Hexagon = _interopRequireDefault(require("./Icons/Hexagon"));

var _SineWave = _interopRequireWildcard(require("./Icons/SineWave"));

var _Triangle = _interopRequireDefault(require("./Icons/Triangle"));

var _useGSAPAnimateStroke = _interopRequireDefault(require("./hooks/useGSAPAnimateStroke"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var TIME_LINE;
var SINE_WAVE_LENGTH = 12.5;
var HEXAGON_WIDTH = 30;
var HEXAGON_HEIGHT = 32;
var SINE_WAVE_WIDTHS = [37.5, 50];
var HEXAGON_STROKE_WIDTH = 10;
var SINE_WAVE_STROKE_WIDTHS = [1.5, 2.5];
var angle = 2 * Math.PI / 3;
var TRIANGLE_RADIUS = 30;
var TRIANGLE_SIZE = 6;

function Mindoro(_ref) {
  var size = _ref.size,
      delay = _ref.delay,
      repeatDelay = _ref.repeatDelay,
      repeat = _ref.repeat,
      style = _ref.style,
      onComplete = _ref.onComplete,
      onStart = _ref.onStart,
      onRepeat = _ref.onRepeat,
      className = _ref.className;
  var hexagonRef = (0, _react.useRef)();
  var seahouseRefs = (0, _react.useRef)(_toConsumableArray(Array(4)).map(function () {
    return (0, _react.createRef)();
  }));
  var sinewavesRefs = (0, _react.useRef)(_toConsumableArray(Array(8)).map(function () {
    return (0, _react.createRef)();
  }));
  var triangleRefs = (0, _react.useRef)(_toConsumableArray(Array(3)).map(function () {
    return {
      svg: (0, _react.createRef)(),
      shape: (0, _react.createRef)()
    };
  }));

  var _useState = (0, _react.useState)(size),
      _useState2 = _slicedToArray(_useState, 2),
      prevSize = _useState2[0],
      setPrevSize = _useState2[1];

  var _useState3 = (0, _react.useState)(0),
      _useState4 = _slicedToArray(_useState3, 2),
      prevDelay = _useState4[0],
      setPrevDelay = _useState4[1];

  var _useState5 = (0, _react.useState)(0),
      _useState6 = _slicedToArray(_useState5, 2),
      prevRepeatDelay = _useState6[0],
      setPrevRepeatDelay = _useState6[1];

  var _useState7 = (0, _react.useState)(0),
      _useState8 = _slicedToArray(_useState7, 2),
      prevRepeat = _useState8[0],
      setPrevRepeat = _useState8[1];

  var hexagonStrokeWidth = HEXAGON_STROKE_WIDTH * 100 / 400;
  var sineWavelength = (0, _react.useMemo)(function () {
    return SINE_WAVE_LENGTH * prevSize / 100;
  }, [prevSize]);
  var animateSineWaveStroke = (0, _useGSAPAnimateStroke["default"])({
    length: sineWavelength,
    totalLength: _SineWave.length,
    speed: 1.1
  });
  var animateSeahorseStroke = (0, _useGSAPAnimateStroke["default"])({
    length: 40,
    totalLength: _Seahorse.length,
    speed: 1.2
  });
  var animateSeahorse = (0, _react.useCallback)(function () {
    var timelines = [];
    seahouseRefs.current.forEach(function (ref) {
      var timeline = _gsap["default"].timeline();

      animateSeahorseStroke({
        elem: ref.current,
        strokeWidth: 1,
        timeline: timeline
      });
      timelines.push(timeline);
    });
    return timelines;
  }, [animateSeahorseStroke]);
  var animateHexagon = (0, _react.useCallback)(function () {
    var timeline = _gsap["default"].timeline();

    timeline.fromTo(hexagonRef.current, 1, {
      scale: 0,
      rotate: 10,
      transformOrigin: "center",
      attr: {
        "stroke-width": 40
      }
    }, {
      scale: 1,
      rotate: 70,
      attr: {
        "stroke-width": 0
      },
      transformOrigin: "center",
      ease: _gsap.Power4.easeInOut
    });
    timeline.fromTo(hexagonRef.current, 0.3, {
      opacity: 1
    }, {
      opacity: 0,
      ease: _gsap.Power4.easeInOut
    }, "-=0.1");
    return timeline;
  }, []);
  var animateSineWave = (0, _react.useCallback)(function () {
    var timelines = [];
    sinewavesRefs.current.forEach(function (ref, i) {
      var timeline = _gsap["default"].timeline();

      animateSineWaveStroke({
        elem: ref.current,
        strokeWidth: SINE_WAVE_STROKE_WIDTHS[i % 2],
        timeline: timeline
      });
      timelines.push(timeline);
    });
    return timelines;
  }, [animateSineWaveStroke]);
  var animateTriangles = (0, _react.useCallback)(function () {
    var timelines = [];
    var radius = prevSize * TRIANGLE_RADIUS / 100;
    triangleRefs.current.forEach(function (_ref2, i) {
      var svg = _ref2.svg,
          shape = _ref2.shape;

      var timeline = _gsap["default"].timeline();

      var cos = Math.cos(angle * i);
      var sin = Math.sin(angle * i);
      var size = TRIANGLE_SIZE / 2 * prevSize / 100;
      timeline.fromTo(svg.current, 1, {
        x: -size,
        y: -size
      }, {
        x: "".concat(-size + radius * cos),
        y: "".concat(-size + radius * sin),
        ease: _gsap.Expo.easeOut
      });
      timeline.fromTo(shape.current, 1, {
        scale: 0,
        transformOrigin: "center"
      }, {
        scale: 1,
        ease: _gsap.Expo.easeOut
      }, "<");
      timeline.fromTo(svg.current, 1, {
        rotation: 0
      }, {
        rotation: 300 * (i % 2 ? 1 : -1),
        transformOrigin: "50% 50%",
        ease: _gsap.Power4.easeOut
      }, "-=1");
      timeline.fromTo(shape.current, 0.8, {
        attr: {
          "stroke-width": 15
        }
      }, {
        attr: {
          "stroke-width": 0
        },
        ease: _gsap.Power4.easeOut
      }, "-=0.9");
      timeline.fromTo(shape.current, 0.3, {
        opacity: 1
      }, {
        opacity: 0,
        ease: _gsap.Power4.easeOut
      }, "-=0.1");
      timelines.push(timeline);
    }, []);
    return timelines;
  }, [prevSize]);
  var explode = (0, _react.useCallback)(function () {
    var seahorseTimelines = animateSeahorse();
    var hexagonTimeline = animateHexagon();
    var sineWaveTimelines = animateSineWave();
    var trianglesTimelines = animateTriangles();
    TIME_LINE = _gsap["default"].timeline({
      repeat: prevRepeat,
      delay: prevDelay,
      repeatDelay: prevRepeatDelay,
      onStart: onStart,
      onComplete: onComplete,
      onRepeat: onRepeat
    });
    TIME_LINE.add(seahorseTimelines, 0);
    TIME_LINE.add(hexagonTimeline, 0.3);
    TIME_LINE.add(sineWaveTimelines, 0.5);
    TIME_LINE.add(trianglesTimelines, 0.75);
  }, [prevRepeat, prevDelay, prevRepeatDelay, onComplete, onStart, onRepeat, animateSeahorse, animateHexagon, animateSineWave, animateTriangles]);
  (0, _react.useEffect)(function () {
    if (TIME_LINE) TIME_LINE.kill();
    explode();
  }, [explode]);
  (0, _react.useEffect)(function () {
    setPrevSize(size);
    setPrevDelay(delay);
    setPrevRepeatDelay(repeatDelay);
    setPrevRepeat(repeat);
  }, [size, delay, repeatDelay, repeat]);
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: className,
    style: _objectSpread({
      width: size,
      height: size,
      position: "relative"
    }, style)
  }, seahouseRefs.current.map(function (ref, i) {
    return /*#__PURE__*/_react["default"].createElement(_Seahorse["default"], {
      key: i,
      shapeRef: ref,
      color: "#fed766",
      style: {
        position: "absolute",
        width: prevSize * 0.6,
        height: prevSize * 0.6,
        left: "50%",
        top: "50%",
        transform: "translate(-23%, -23%) rotate(".concat(90 * i, "deg)"),
        transformOrigin: "23% 23%"
      }
    });
  }), Array.from(Array(2)).map(function (_, i) {
    return Array.from(Array(4)).map(function (_, j) {
      return /*#__PURE__*/_react["default"].createElement(_SineWave["default"], {
        key: j + 4 * i,
        width: "".concat(SINE_WAVE_WIDTHS[j % 2], "%"),
        height: "4%",
        strokeWidth: 0,
        shapeRef: sinewavesRefs.current[j + 4 * i],
        dasharray: "0 ".concat(_SineWave.length),
        color: "#2ab7ca",
        style: {
          position: "absolute",
          left: "50%",
          top: "50%",
          transform: "\n                rotate(".concat(j * 10 + Math.floor(j / 2) * 30 - 30 + 180 * i, "deg)"),
          transformOrigin: "0 0"
        }
      });
    });
  }), triangleRefs.current.map(function (_ref3, i) {
    var svg = _ref3.svg,
        shape = _ref3.shape;
    return /*#__PURE__*/_react["default"].createElement(_Triangle["default"], {
      key: i,
      width: "".concat(TRIANGLE_SIZE, "%"),
      height: "".concat(TRIANGLE_SIZE, "%"),
      ref: svg,
      shapeRef: shape,
      color: "#88d8b0",
      style: {
        position: "absolute",
        left: "50%",
        top: "50%",
        transform: "\n              translate(-50%, -50%)\n              rotate(".concat(angle * 180 / Math.PI * i - 30, "deg)")
      },
      border: true
    });
  }), /*#__PURE__*/_react["default"].createElement(_Hexagon["default"], {
    width: "".concat(HEXAGON_WIDTH, "%"),
    height: "".concat(HEXAGON_HEIGHT, "%"),
    strokeWidth: hexagonStrokeWidth,
    shapeRef: hexagonRef,
    color: "#fe4a49",
    style: {
      position: "absolute",
      left: "50%",
      top: "50%",
      transform: "translate(-50%, -50%) rotate(10deg)"
    }
  }));
}