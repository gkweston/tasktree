"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Ticao;

var _react = _interopRequireWildcard(require("react"));

var _gsap = _interopRequireWildcard(require("gsap"));

var _Circle = _interopRequireDefault(require("./Icons/Circle"));

var _useGSAPAnimateStroke = _interopRequireDefault(require("./hooks/useGSAPAnimateStroke"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var LINES_LENGTH = 4;
var LINE_LENGTH = 30;
var LINE_TOTAL_LENGTH = 60;
var CIRCLES_LENGTH = 4;
var CIRCLE_SIZE = 20;
var LINES_SIZE = 25;
var CIRCLE_RADIUS = 30;
var LINES_RADIUS = 30;
var CIRCLE_LINES_LENGTH = 9;
var ANGLE = Math.PI / 2;
var PREFIX_ANGLE = Math.PI / 4;
var LINE_STROKE_WIDTH = 1;
var CIRCLE_STROKE_WIDTH = 2;
var TIME_LINE;

function GrandUnit(_ref) {
  var linesCenter = _ref.linesCenter,
      index = _ref.index,
      lineRef = _ref.lineRef;
  var x = (0, _react.useMemo)(function () {
    return linesCenter + Math.cos(index * (2 * Math.PI / 9)) * linesCenter;
  }, [index, linesCenter]);
  var y = (0, _react.useMemo)(function () {
    return linesCenter + Math.sin(index * (2 * Math.PI / 9)) * linesCenter;
  }, [linesCenter, index]);
  return /*#__PURE__*/_react["default"].createElement("line", {
    key: index,
    x1: linesCenter,
    y1: linesCenter,
    x2: x,
    y2: y,
    stroke: "#2ab7ca",
    ref: lineRef
  });
}

function Unit(_ref2) {
  var size = _ref2.size,
      index = _ref2.index,
      circlesRefs = _ref2.circlesRefs,
      circleLinesRefs = _ref2.circleLinesRefs;
  var center = size / 2;
  var x = (0, _react.useMemo)(function () {
    return Math.cos(index * ANGLE);
  }, [index]);
  var y = (0, _react.useMemo)(function () {
    return Math.sin(index * ANGLE);
  }, [index]);
  var circleSize = (0, _react.useMemo)(function () {
    return size * CIRCLE_SIZE / 100;
  }, [size]);
  var linesSize = (0, _react.useMemo)(function () {
    return size * LINES_SIZE / 100;
  }, [size]);
  var circleRadius = (0, _react.useMemo)(function () {
    return size * CIRCLE_RADIUS / 100;
  }, [size]);
  var linesRadius = (0, _react.useMemo)(function () {
    return size * LINES_RADIUS / 100;
  }, [size]);
  var circleCenter = circleSize / 2;
  var linesCenter = linesSize / 2;
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_Circle["default"], {
    shapeRef: circlesRefs.current[index],
    color: "#fe4a49",
    style: {
      position: "absolute",
      top: center - circleCenter + y * circleRadius,
      left: center - circleCenter + x * circleRadius,
      width: "".concat(CIRCLE_SIZE, "%"),
      height: "".concat(CIRCLE_SIZE, "%")
    }
  }), /*#__PURE__*/_react["default"].createElement("svg", {
    style: {
      position: "absolute",
      width: "".concat(LINES_SIZE, "%"),
      height: "".concat(LINES_SIZE, "%"),
      top: center - linesCenter + y * linesRadius,
      left: center - linesCenter + x * linesRadius
    }
  }, Array.from(Array(CIRCLE_LINES_LENGTH)).map(function (_, j) {
    return /*#__PURE__*/_react["default"].createElement(GrandUnit, {
      key: j + CIRCLE_LINES_LENGTH * index,
      index: j,
      linesCenter: linesCenter,
      lineRef: circleLinesRefs.current[j + CIRCLE_LINES_LENGTH * index]
    });
  })));
}

function Line(_ref3) {
  var size = _ref3.size,
      index = _ref3.index,
      lineRef = _ref3.lineRef,
      lineTotalLength = _ref3.lineTotalLength;
  var center = size / 2;
  var circleSize = (0, _react.useMemo)(function () {
    return size * CIRCLE_SIZE / 100;
  }, [size]);
  var circleRadius = (0, _react.useMemo)(function () {
    return size * CIRCLE_RADIUS / 100;
  }, [size]);
  var circleCenter = circleSize / 2;
  var radius = circleRadius - circleCenter + 5;
  var x = center - lineTotalLength / 2 + Math.cos(PREFIX_ANGLE + index * ANGLE) * radius;
  var y = center - 5 / 2 + Math.sin(PREFIX_ANGLE + index * ANGLE) * radius;
  return /*#__PURE__*/_react["default"].createElement("svg", {
    key: index,
    width: lineTotalLength,
    height: 5,
    style: {
      top: y,
      left: x,
      position: "absolute",
      transform: " rotate(".concat(135 + 90 * index, "deg)")
    }
  }, /*#__PURE__*/_react["default"].createElement("line", {
    ref: lineRef,
    strokeWidth: 0,
    strokeDasharray: "0 ".concat(lineTotalLength),
    x1: "0",
    y1: "50%",
    x2: "100%",
    y2: "50%",
    stroke: "#fed766",
    strokeLinecap: "round"
  }));
}

function Ticao(_ref4) {
  var size = _ref4.size,
      delay = _ref4.delay,
      repeatDelay = _ref4.repeatDelay,
      repeat = _ref4.repeat,
      style = _ref4.style,
      onComplete = _ref4.onComplete,
      onStart = _ref4.onStart,
      onRepeat = _ref4.onRepeat,
      className = _ref4.className;
  var linesRefs = (0, _react.useRef)(_toConsumableArray(Array(LINES_LENGTH)).map(function () {
    return (0, _react.createRef)();
  }));
  var circleLinesRefs = (0, _react.useRef)(_toConsumableArray(Array(CIRCLE_LINES_LENGTH * 4)).map(function () {
    return (0, _react.createRef)();
  }));
  var circlesRefs = (0, _react.useRef)(_toConsumableArray(Array(CIRCLES_LENGTH)).map(function () {
    return (0, _react.createRef)();
  }));

  var _useState = (0, _react.useState)(size),
      _useState2 = _slicedToArray(_useState, 2),
      prevSize = _useState2[0],
      setPrevSize = _useState2[1];

  var _useState3 = (0, _react.useState)(0),
      _useState4 = _slicedToArray(_useState3, 2),
      prevDelay = _useState4[0],
      setPrevDelay = _useState4[1];

  var _useState5 = (0, _react.useState)(0),
      _useState6 = _slicedToArray(_useState5, 2),
      prevRepeatDelay = _useState6[0],
      setPrevRepeatDelay = _useState6[1];

  var _useState7 = (0, _react.useState)(0),
      _useState8 = _slicedToArray(_useState7, 2),
      prevRepeat = _useState8[0],
      setPrevRepeat = _useState8[1];

  var lineTotalLength = (0, _react.useMemo)(function () {
    return prevSize * LINE_TOTAL_LENGTH / 100;
  }, [prevSize]);
  var lineStrokeWidth = (0, _react.useMemo)(function () {
    return prevSize * LINE_STROKE_WIDTH / 100;
  }, [prevSize]);
  var linesSize = (0, _react.useMemo)(function () {
    return prevSize * LINES_SIZE / 100;
  }, [prevSize]);
  var lineLength = (0, _react.useMemo)(function () {
    return prevSize * LINE_LENGTH / 100;
  }, [prevSize]);
  var animateStroke = (0, _useGSAPAnimateStroke["default"])({
    length: lineLength,
    totalLength: lineTotalLength,
    speed: 1.3
  });
  var animateLines = (0, _react.useCallback)(function () {
    var timelines = [];
    linesRefs.current.forEach(function (ref, i) {
      var timeline = _gsap["default"].timeline({
        delay: 0.07 * i
      });

      animateStroke({
        elem: ref.current,
        timeline: timeline,
        strokeWidth: lineStrokeWidth
      });
      timelines.push(timeline);
    });
    return timelines;
  }, [animateStroke, lineStrokeWidth]);
  var animateCircles = (0, _react.useCallback)(function () {
    var timelines = [];
    var strokeWidth = prevSize * CIRCLE_STROKE_WIDTH / 100;
    circlesRefs.current.forEach(function (ref, i) {
      var timeline = _gsap["default"].timeline({
        delay: 0.08 * i
      });

      timeline.set(ref.current, {
        attr: {
          "stroke-width": 20
        },
        scale: 0
      });
      timeline.set(ref.current, {
        opacity: 1
      });
      timeline.fromTo(ref.current, 0.5, {
        attr: {
          "stroke-width": 20
        },
        scale: 0,
        transformOrigin: "center"
      }, {
        attr: {
          "stroke-width": strokeWidth
        },
        scale: 1,
        ease: _gsap.Power4.easeInOut
      });
      timeline.to(ref.current, 0.5, {
        attr: {
          "stroke-width": 0
        },
        ease: _gsap.Power4.easeInOut
      }, "-=0.45");
      timeline.fromTo(ref.current, 0.4, {
        opacity: 1
      }, {
        opacity: 0,
        ease: _gsap.Power4.easeInOut
      }, "-=0.3");
      timelines.push(timeline);
    });
    return timelines;
  }, [prevSize]);
  var animateCircleLines = (0, _react.useCallback)(function () {
    var timelines = [];
    circleLinesRefs.current.forEach(function (ref, i) {
      var radius = linesSize / 2;
      var angle = 2 * Math.PI / 9;
      var x = radius + radius * Math.cos(i * angle);
      var y = radius + radius * Math.sin(i * angle);
      var start = {
        x2: x,
        y2: y
      };
      var end = {
        x1: x,
        y1: y
      };

      var timeline = _gsap["default"].timeline({
        delay: 0.08 * Math.floor(i / 9)
      });

      timeline.fromTo(ref.current, 0.7, {
        attr: {
          x2: radius,
          y2: radius
        }
      }, {
        attr: start,
        ease: _gsap.Power4.easeInOut
      }).fromTo(ref.current, 0.6, {
        attr: {
          x1: radius,
          y1: radius
        }
      }, {
        attr: end,
        ease: _gsap.Power4.easeInOut
      }, "-=0.6");
      timelines.push(timeline);
    });
    return timelines;
  }, [linesSize]);
  var explode = (0, _react.useCallback)(function () {
    var linesRefs = animateLines();
    var circlesRefs = animateCircles();
    var circleLinesRefs = animateCircleLines();
    TIME_LINE = _gsap["default"].timeline({
      repeat: prevRepeat,
      delay: prevDelay,
      repeatDelay: prevRepeatDelay,
      onStart: onStart,
      onComplete: onComplete,
      onRepeat: onRepeat
    });
    TIME_LINE.add(linesRefs, 0);
    TIME_LINE.add(circlesRefs, 0.15);
    TIME_LINE.add(circleLinesRefs, 0.15);
  }, [animateCircles, animateLines, animateCircleLines, onComplete, onStart, onRepeat, prevRepeat, prevDelay, prevRepeatDelay]);
  (0, _react.useEffect)(function () {
    if (TIME_LINE) TIME_LINE.kill();
    explode();
  }, [explode]);
  (0, _react.useEffect)(function () {
    setPrevSize(size);
    setPrevDelay(delay);
    setPrevRepeatDelay(repeatDelay);
    setPrevRepeat(repeat);
  }, [size, delay, repeatDelay, repeat]);
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: className,
    style: _objectSpread({
      width: prevSize,
      height: prevSize,
      position: "relative"
    }, style)
  }, linesRefs.current.map(function (ref, i) {
    return /*#__PURE__*/_react["default"].createElement(Line, {
      key: i,
      index: i,
      lineRef: ref,
      size: prevSize,
      strokeWidth: lineStrokeWidth,
      lineTotalLength: lineTotalLength
    });
  }), Array.from(Array(4)).map(function (_, i) {
    return /*#__PURE__*/_react["default"].createElement(Unit, {
      key: i,
      index: i,
      circleLinesRefs: circleLinesRefs,
      circlesRefs: circlesRefs,
      size: prevSize
    });
  }));
}