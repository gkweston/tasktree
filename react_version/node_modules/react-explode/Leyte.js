"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Leyte;

var _react = _interopRequireWildcard(require("react"));

var _gsap = _interopRequireWildcard(require("gsap"));

var _Circle = _interopRequireDefault(require("./Icons/Circle"));

var _Square = _interopRequireDefault(require("./Icons/Square"));

var _Triangle = _interopRequireDefault(require("./Icons/Triangle"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var LINES_RADIUS = 30;
var SHAPES_RADIUS = 45;
var CIRCLE_STROKE_WIDTH = 0.4;
var SHAPE_SIZE = 6;
var CIRCLES_LENGTH = 7;
var TIME_LINE = null;

function Triangle(_ref) {
  var innerRef = _ref.innerRef,
      pos = _ref.pos,
      style = _ref.style;
  return /*#__PURE__*/_react["default"].createElement(_Triangle["default"], {
    style: _objectSpread({}, style, {
      top: "".concat(pos.t * 100, "%")
    }),
    ref: innerRef,
    border: true,
    strokeWidth: 3,
    color: "#fed766"
  });
}

function Square(_ref2) {
  var innerRef = _ref2.innerRef,
      pos = _ref2.pos,
      style = _ref2.style;
  return /*#__PURE__*/_react["default"].createElement(_Square["default"], {
    style: _objectSpread({}, style, {
      top: "".concat(pos.s * 100, "%")
    }),
    ref: innerRef,
    strokeWidth: 3,
    color: "#fed766"
  });
}

function Circle(_ref3) {
  var innerRef = _ref3.innerRef,
      pos = _ref3.pos,
      style = _ref3.style;
  return /*#__PURE__*/_react["default"].createElement(_Circle["default"], {
    style: _objectSpread({}, style, {
      top: "".concat(pos.c * 100, "%")
    }),
    ref: innerRef,
    radius: 20,
    strokeWidth: 3,
    color: "#fed766"
  });
}

var groups = [[Square, Triangle, Circle], [Square, Circle, Triangle]];

function Leyte(_ref4) {
  var size = _ref4.size,
      delay = _ref4.delay,
      repeatDelay = _ref4.repeatDelay,
      repeat = _ref4.repeat,
      style = _ref4.style,
      onComplete = _ref4.onComplete,
      onStart = _ref4.onStart,
      onRepeat = _ref4.onRepeat,
      className = _ref4.className;
  var circleRefs = (0, _react.useRef)(_toConsumableArray(Array(7)).map(function () {
    return (0, _react.createRef)();
  }));
  var lineRefs = (0, _react.useRef)(_toConsumableArray(Array(9)).map(function () {
    return (0, _react.createRef)();
  }));
  var shapesRefs = (0, _react.useRef)(_toConsumableArray(Array(6)).map(function () {
    return (0, _react.createRef)();
  }));

  var _useState = (0, _react.useState)(size),
      _useState2 = _slicedToArray(_useState, 2),
      prevSize = _useState2[0],
      setPrevSize = _useState2[1];

  var _useState3 = (0, _react.useState)(0),
      _useState4 = _slicedToArray(_useState3, 2),
      prevDelay = _useState4[0],
      setPrevDelay = _useState4[1];

  var _useState5 = (0, _react.useState)(0),
      _useState6 = _slicedToArray(_useState5, 2),
      prevRepeatDelay = _useState6[0],
      setPrevRepeatDelay = _useState6[1];

  var _useState7 = (0, _react.useState)(0),
      _useState8 = _slicedToArray(_useState7, 2),
      prevRepeat = _useState8[0],
      setPrevRepeat = _useState8[1];

  var center = prevSize / 2;
  var strokeWidth = (0, _react.useMemo)(function () {
    return prevSize * CIRCLE_STROKE_WIDTH / 100;
  }, [prevSize]);
  var animateCircles = (0, _react.useCallback)(function () {
    var timelines = [];
    circleRefs.current.forEach(function (ref, i) {
      if (i > 1) {
        var timeline = _gsap["default"].timeline({
          delay: (5 - i) * 0.07
        });

        var radius = 5 + 2 * i;
        var circumference = radius * 2 * Math.PI;
        timeline.set(ref.current, {
          attr: {
            "stroke-dashoffset": circumference
          }
        });
        timeline.fromTo(ref.current, 0.8, {
          attr: {
            "stroke-dashoffset": circumference,
            "stroke-dasharray": "".concat(circumference, " ").concat(circumference)
          },
          ease: _gsap.Power1.easeIn
        }, {
          attr: {
            "stroke-dasharray": "0 ".concat(circumference)
          },
          ease: _gsap.Power1.easeOut
        });
        timeline.fromTo(ref.current, 0.3, {
          attr: {
            "stroke-width": 2 - 0.1 * (7 - i)
          }
        }, {
          attr: {
            "stroke-width": 0
          }
        }, "-=0.2");
        timelines.push(timeline);
      } else if (i === 1) {
        var _timeline = _gsap["default"].timeline();

        _timeline.set(ref.current, {
          scale: 0,
          opacity: 1,
          attr: {
            "stroke-width": 15
          }
        });

        _timeline.fromTo(ref.current, 0.6, {
          scale: 0,
          transformOrigin: "center",
          attr: {
            "stroke-width": 15
          }
        }, {
          scale: 1,
          attr: {
            "stroke-width": 2 - 0.1 * (7 - i)
          },
          ease: _gsap.Power4.easeOut
        });

        _timeline.to(ref.current, 0.6, {
          scale: 0.7,
          transformOrigin: "center",
          attr: {
            "stroke-width": 0
          },
          opacity: 0,
          ease: _gsap.Power4.easeOut
        });

        timelines.push(_timeline);
      } else {
        var _timeline2 = _gsap["default"].timeline({
          delay: 0.8
        });

        _timeline2.set(ref.current, {
          scale: 0,
          opacity: 1,
          attr: {
            "stroke-width": 15
          }
        });

        _timeline2.fromTo(ref.current, 0.5, {
          scale: 0,
          transformOrigin: "center",
          attr: {
            "stroke-width": 15
          }
        }, {
          scale: 1,
          attr: {
            "stroke-width": 0.3
          },
          ease: _gsap.Power4.easeOut
        });

        _timeline2.to(ref.current, 0.3, {
          attr: {
            "stroke-width": 0
          },
          opacity: 0
        }, "-=0.2");

        timelines.push(_timeline2);
      }
    });
    return timelines;
  }, []);
  var animateLines = (0, _react.useCallback)(function () {
    var timelines = [];
    lineRefs.current.forEach(function (ref, i) {
      var radius = prevSize * LINES_RADIUS / 100;
      var angle = 2 * Math.PI / 9;
      var x = center + radius * Math.cos(i * angle);
      var y = center + radius * Math.sin(i * angle);
      var start = {
        x2: x,
        y2: y
      };
      var end = {
        x1: x,
        y1: y
      };

      var timeline = _gsap["default"].timeline({
        delay: 0.8
      });

      timeline.fromTo(ref.current, 0.7, {
        attr: {
          x2: center,
          y2: center
        }
      }, {
        attr: start,
        ease: _gsap.Power4.easeOut
      }).fromTo(ref.current, 0.6, {
        attr: {
          x1: center,
          y1: center
        }
      }, {
        attr: end,
        ease: _gsap.Power4.easeOut
      }, "-=0.6");
      timelines.push(timeline);
    });
    return timelines;
  }, [center, prevSize]);
  var animateshapes = (0, _react.useCallback)(function () {
    var timelines = [];
    var shapesSize = SHAPE_SIZE / 2 * prevSize / 100;
    shapesRefs.current.forEach(function (ref, i) {
      var timeline = _gsap["default"].timeline({
        delay: i % 3 * 0.1
      });

      var radius = prevSize * SHAPES_RADIUS / 100;
      timeline.fromTo(ref.current, 0.4, {
        x: -shapesSize,
        opacity: 0
      }, {
        x: -shapesSize + radius * (i > 2 ? 1 : -1),
        opacity: 1,
        ease: _gsap.Power2.easeOut
      });
      timeline.to(ref.current, 0.4, {
        x: -shapesSize,
        opacity: 0,
        ease: _gsap.Power2.easeIn
      });
      timeline.fromTo(ref.current, 0.8, {
        rotate: 0
      }, {
        rotate: 250,
        ease: _gsap.Power1.easeInOut
      }, "-=0.7");
      timelines.push(timeline);
    });
    return timelines;
  }, [prevSize]);
  var explode = (0, _react.useCallback)(function () {
    var circlesTimelines = animateCircles();
    var linesTimelines = animateLines();
    var shapesTimelines = animateshapes();
    TIME_LINE = _gsap["default"].timeline({
      repeat: prevRepeat,
      delay: prevDelay,
      repeatDelay: prevRepeatDelay,
      onStart: onStart,
      onComplete: onComplete,
      onRepeat: onRepeat
    });
    TIME_LINE.add(shapesTimelines, 0);
    TIME_LINE.add(circlesTimelines, 0.1);
    TIME_LINE.add(linesTimelines, 0.1);
  }, [prevRepeat, prevDelay, prevRepeatDelay, onComplete, onStart, onRepeat, animateCircles, animateLines, animateshapes]);
  (0, _react.useEffect)(function () {
    if (TIME_LINE) TIME_LINE.kill();
    explode();
  }, [explode]);
  (0, _react.useEffect)(function () {
    setPrevSize(size);
    setPrevDelay(delay);
    setPrevRepeatDelay(repeatDelay);
    setPrevRepeat(repeat);
  }, [size, delay, repeatDelay, repeat]);
  var positions = [{
    s: 0.3,
    t: 0.5,
    c: 0.7
  }, {
    s: 0.7,
    t: 0.3,
    c: 0.5
  }];
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: className,
    style: _objectSpread({
      width: size,
      height: size,
      position: "relative"
    }, style)
  }, Array.from(Array(CIRCLES_LENGTH)).map(function (_, i) {
    return /*#__PURE__*/_react["default"].createElement(_Circle["default"], {
      key: i,
      shapeRef: circleRefs.current[i],
      radius: 5 + 2 * (i === 0 ? i + 1 : i),
      fill: "none",
      color: i > 0 ? " #2ab7ca" : "#fe4a49",
      strokeWidth: 2 - 0 * (CIRCLES_LENGTH - i),
      style: {
        position: "absolute",
        width: "100%",
        height: "100%",
        transform: "\n              rotate(".concat(90 * (i % 2 ? 1 : -1), "deg)\n              rotateX(").concat(i % 2 ? 180 : 0, "deg)\n            ")
      },
      strokeLinecap: "round"
    });
  }), /*#__PURE__*/_react["default"].createElement("svg", {
    width: prevSize,
    height: prevSize
  }, Array.from(Array(9)).map(function (_, i) {
    return /*#__PURE__*/_react["default"].createElement("line", {
      x1: center,
      y1: center,
      x2: center,
      y2: center,
      ref: lineRefs.current[i],
      key: i,
      strokeWidth: 2,
      stroke: "#fe4a49"
    });
  })), Array.from(Array(2)).map(function (_, i) {
    return groups[i].map(function (Shape, j) {
      return /*#__PURE__*/_react["default"].createElement(Shape, {
        key: j + 3 * i,
        innerRef: shapesRefs.current[j + 3 * i],
        pos: positions[i],
        strokeWidth: 1,
        stroke: "#5ADFFF",
        style: {
          position: "absolute",
          left: "50%",
          transform: "translate(-50%, -50%)",
          width: "".concat(SHAPE_SIZE, "%"),
          height: "".concat(SHAPE_SIZE, "%"),
          opacity: 0
        }
      });
    });
  }));
}