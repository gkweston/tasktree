"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function Triangle(_ref, ref) {
  var _ref$width = _ref.width,
      width = _ref$width === void 0 ? 10 : _ref$width,
      _ref$height = _ref.height,
      height = _ref$height === void 0 ? 10 : _ref$height,
      _ref$strokeWidth = _ref.strokeWidth,
      strokeWidth = _ref$strokeWidth === void 0 ? 1 : _ref$strokeWidth,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? "#fff" : _ref$color,
      _ref$points = _ref.points,
      points = _ref$points === void 0 ? "0,0 60,30 0,60 0,30" : _ref$points,
      shapeRef = _ref.shapeRef,
      _ref$border = _ref.border,
      border = _ref$border === void 0 ? false : _ref$border,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style;
  return /*#__PURE__*/_react["default"].createElement("svg", {
    ref: ref,
    width: width,
    height: height,
    viewBox: "0 0 60 60",
    style: style
  }, /*#__PURE__*/_react["default"].createElement("polygon", {
    ref: shapeRef,
    points: points,
    fill: border ? "none" : color,
    stroke: border ? color : "none",
    strokeWidth: strokeWidth
  }));
}

var _default = (0, _react.forwardRef)(Triangle);

exports["default"] = _default;