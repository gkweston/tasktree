{"ast":null,"code":"var _jsxFileName = \"/Users/gkweston/Git/todo-436/src/components/Tasks/TaskListContainer.js\";\nimport React from 'react';\nimport TaskList from './TaskList';\nimport { connect } from 'react-redux';\nimport { moveNode } from '../../store/hierarchy/nodes';\nimport { orderedNodeDataSelector } from '../../store';\nimport Container from '@material-ui/core/Container';\nimport Score from './../Score';\n\nclass TaskListContainer extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      draggingTask: null\n    };\n\n    this.updateBeforeSortStart = _ref => {\n      let {\n        index\n      } = _ref;\n      this.setState({\n        draggingTask: this.props.tasks[index]\n      });\n    };\n\n    this.onSortEnd = _ref2 => {\n      let {\n        oldIndex,\n        newIndex\n      } = _ref2;\n      this.setState({\n        draggingTask: null\n      });\n\n      if (oldIndex === newIndex) {\n        return;\n      }\n\n      const draggedTask = this.props.tasks[oldIndex];\n      const droppedTask = this.props.tasks[newIndex];\n      const dir = newIndex > oldIndex ? 'down' : 'up';\n      const payload = {\n        id: draggedTask.id,\n        parent: droppedTask.descendants.length && dir === 'down' ? droppedTask.id : droppedTask.parent.id\n      };\n\n      if (dir === 'down') {\n        payload.after = droppedTask.id;\n      } else {\n        payload.before = droppedTask.id;\n      }\n\n      this.props.moveNode(payload);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Container, {\n      style: {\n        background: '#173679',\n        overflow: 'auto',\n        flex: 1,\n        marginTop: 65\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Score, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(TaskList, {\n      draggingTask: this.state.draggingTask,\n      useDragHandle: true,\n      lockAxis: \"y\",\n      tasks: this.props.tasks,\n      onSortEnd: this.onSortEnd,\n      onSortMove: this.onSortMove,\n      updateBeforeSortStart: this.updateBeforeSortStart,\n      distance: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    moveNode: payload => dispatch(moveNode('tasks', payload))\n  };\n};\n\nconst mapDataToProps = state => {\n  return {\n    tasks: orderedNodeDataSelector(state)\n  };\n};\n\nexport default connect(mapDataToProps, mapDispatchToProps)(TaskListContainer);","map":{"version":3,"sources":["/Users/gkweston/Git/todo-436/src/components/Tasks/TaskListContainer.js"],"names":["React","TaskList","connect","moveNode","orderedNodeDataSelector","Container","Score","TaskListContainer","Component","state","draggingTask","updateBeforeSortStart","index","setState","props","tasks","onSortEnd","oldIndex","newIndex","draggedTask","droppedTask","dir","payload","id","parent","descendants","length","after","before","render","background","overflow","flex","marginTop","onSortMove","mapDispatchToProps","dispatch","mapDataToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TaskList from './TaskList';\nimport { connect } from 'react-redux';\nimport { moveNode } from '../../store/hierarchy/nodes';\nimport { orderedNodeDataSelector } from '../../store';\nimport Container from '@material-ui/core/Container';\nimport Score from './../Score'\n\nclass TaskListContainer extends React.Component {\n  state = {\n    draggingTask: null\n  };\n\n  updateBeforeSortStart = ({ index }) => {\n    this.setState({\n      draggingTask: this.props.tasks[index]\n    });\n  };\n\n  onSortEnd = ({ oldIndex, newIndex }) => {\n    this.setState({\n      draggingTask: null\n    });\n\n    if (oldIndex === newIndex) {\n      return;\n    }\n\n    const draggedTask = this.props.tasks[oldIndex];\n    const droppedTask = this.props.tasks[newIndex];\n\n    const dir = newIndex > oldIndex ? 'down' : 'up';\n\n    const payload = {\n      id: draggedTask.id,\n      parent:\n        droppedTask.descendants.length && dir === 'down'\n          ? droppedTask.id\n          : droppedTask.parent.id\n    };\n\n    if (dir === 'down') {\n      payload.after = droppedTask.id;\n    } else {\n      payload.before = droppedTask.id;\n    }\n\n    this.props.moveNode(payload);\n  };\n\n  render() {\n    return (\n      <Container\n        style={{\n          background:'#173679',\n          overflow: 'auto',\n          flex: 1,\n          marginTop: 65\n        }}\n      >\n        <Score />\n        <TaskList\n          draggingTask={this.state.draggingTask}\n          useDragHandle\n          lockAxis='y'\n          tasks={this.props.tasks}\n          onSortEnd={this.onSortEnd}\n          onSortMove={this.onSortMove}\n          updateBeforeSortStart={this.updateBeforeSortStart}\n          distance={5}\n        />\n      </Container>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    moveNode: payload => dispatch(moveNode('tasks', payload))\n  };\n};\n\nconst mapDataToProps = state => {\n  return {\n    tasks: orderedNodeDataSelector(state)\n  };\n};\n\nexport default connect(\n  mapDataToProps,\n  mapDispatchToProps\n)(TaskListContainer);\n"]},"metadata":{},"sourceType":"module"}