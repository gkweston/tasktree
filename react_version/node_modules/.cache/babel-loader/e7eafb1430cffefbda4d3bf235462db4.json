{"ast":null,"code":"var _jsxFileName = \"/Users/gkweston/Git/todo-436/src/components/Tasks/Task.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { SortableElement, sortableHandle } from 'react-sortable-hoc';\nimport { uniqueId } from 'lodash';\nimport { ListItem } from '@material-ui/core';\nimport { DragHandle, DeleteForever } from '@material-ui/icons';\nimport TextField from '@material-ui/core/TextField';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { indentNode, unindentNode, updateNode, deleteNode, createNode } from '../../store/hierarchy/nodes';\nconst DraggableHandle = sortableHandle(() => /*#__PURE__*/React.createElement(DragHandle, {\n  style: {\n    cursor: 'grab'\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 3\n  }\n})); // (!)\n\nconst updateScore = (id, completed) => {\n  if (completed) {\n    const score = localStorage.getItem('score');\n    var score_int = parseInt(score);\n    score_int = score_int + 15;\n    localStorage.setItem('score', score_int);\n    alert('New Score:' + score_int);\n    deleteNode(id);\n  }\n};\n/*\nconst updateScore = (id) => {\n  const score = localStorage.getItem('score')\n  var score_int = parseInt(score)\n  score_int = score_int + 15\n  localStorage.setItem('score', score_int)\n  alert('New Score:' + score_int)\n  deleteNode(id)\n};\n*/\n\n\nconst Task = _ref => {\n  let {\n    id,\n    parent,\n    data,\n    completed,\n    descendants,\n    ancestors,\n    depth,\n    createNode,\n    deleteNode,\n    indentNode,\n    unindentNode,\n    updateNode,\n    dragging,\n    left,\n    right\n  } = _ref;\n\n  const onKeyDownHandler = event => {\n    if (event.key === 'Tab' || event.key === 'Tab' && event.shiftKey) {\n      event.preventDefault();\n    }\n\n    if (event.key === 'Tab' && event.shiftKey) {\n      unindentNode({\n        id\n      });\n    } else if (event.key === 'Tab' && !event.shiftKey) {\n      indentNode({\n        id\n      });\n    }\n\n    if (event.key === 'Backspace' && data.text.length === 0) {\n      deleteNode({\n        id\n      });\n    }\n\n    if (event.key === 'Enter') {\n      const newId = uniqueId();\n      createNode({\n        id: newId,\n        parent: parent.id,\n        data: {\n          text: ''\n        }\n      });\n      setTimeout(() => {\n        document.querySelector(`#text-${newId}`).focus();\n      }, 50);\n    }\n\n    if (event.key === 'ArrowDown' && right) {\n      document.querySelector(`#text-${right.id}`).focus();\n    }\n\n    if (event.key === 'ArrowUp' && left) {\n      document.querySelector(`#text-${left.id}`).focus();\n    }\n  };\n\n  const textOnChange = event => {\n    updateNode({\n      id,\n      data: { ...data,\n        text: event.target.value\n      }\n    });\n  };\n\n  const checkOnChange = event => {\n    const toUpdate = [...descendants, id];\n    toUpdate.forEach(id => {\n      updateNode({\n        id,\n        completed: event.target.checked\n      });\n    });\n\n    if (parent.id !== 'root') {\n      ancestors.forEach(id => {\n        updateNode({\n          id,\n          completed: false\n        });\n      });\n    }\n  };\n\n  const opacity = dragging ? 0.7 : 1;\n  return /*#__PURE__*/React.createElement(ListItem, {\n    style: {\n      backgroundColor: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DraggableHandle, {\n    style: {\n      color: '#450B8F'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      width: '100%',\n      marginLeft: depth * 15,\n      opacity,\n      display: 'flex',\n      flexDirection: 'row'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Checkbox, {\n    checked: completed,\n    value: completed,\n    color: \"primary\" // onChange={() => deleteNode({ id })}\n    ,\n    onChange: updateScore(id, checked) //(!)\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    color: \"primary\",\n    id: `text-${id}`,\n    fullWidth: true,\n    margin: \"normal\",\n    onKeyDown: onKeyDownHandler,\n    onChange: textOnChange,\n    value: data.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(DeleteForever, {\n    color: \"primary\",\n    style: {\n      alignSelf: 'center',\n      cursor: 'pointer'\n    },\n    onClick: () => deleteNode({\n      id\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  })));\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    indentNode: payload => dispatch(indentNode('tasks', payload)),\n    unindentNode: payload => dispatch(unindentNode('tasks', payload)),\n    updateNode: payload => dispatch(updateNode('tasks', payload)),\n    deleteNode: payload => dispatch(deleteNode('tasks', payload)),\n    createNode: payload => dispatch(createNode('tasks', payload))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(SortableElement(Task));","map":{"version":3,"sources":["/Users/gkweston/Git/todo-436/src/components/Tasks/Task.js"],"names":["React","connect","SortableElement","sortableHandle","uniqueId","ListItem","DragHandle","DeleteForever","TextField","Checkbox","indentNode","unindentNode","updateNode","deleteNode","createNode","DraggableHandle","cursor","updateScore","id","completed","score","localStorage","getItem","score_int","parseInt","setItem","alert","Task","parent","data","descendants","ancestors","depth","dragging","left","right","onKeyDownHandler","event","key","shiftKey","preventDefault","text","length","newId","setTimeout","document","querySelector","focus","textOnChange","target","value","checkOnChange","toUpdate","forEach","checked","opacity","backgroundColor","color","width","marginLeft","display","flexDirection","alignSelf","mapDispatchToProps","dispatch","payload"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { SortableElement, sortableHandle } from 'react-sortable-hoc';\nimport { uniqueId } from 'lodash';\nimport { ListItem } from '@material-ui/core';\nimport { DragHandle, DeleteForever } from '@material-ui/icons';\nimport TextField from '@material-ui/core/TextField';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport {\n  indentNode,\n  unindentNode,\n  updateNode,\n  deleteNode,\n  createNode\n} from '../../store/hierarchy/nodes';\n\nconst DraggableHandle = sortableHandle(() => (\n  <DragHandle style={{ cursor: 'grab' }} />\n));\n\n// (!)\nconst updateScore = (id, completed) => {\n  if (completed){\n    const score = localStorage.getItem('score')\n    var score_int = parseInt(score)\n    score_int = score_int + 15\n    localStorage.setItem('score', score_int)\n    alert('New Score:' + score_int)\n    deleteNode(id)\n  }   \n};\n/*\nconst updateScore = (id) => {\n  const score = localStorage.getItem('score')\n  var score_int = parseInt(score)\n  score_int = score_int + 15\n  localStorage.setItem('score', score_int)\n  alert('New Score:' + score_int)\n  deleteNode(id)\n};\n*/\n\nconst Task = ({\n  id,\n  parent,\n  data,\n  completed,\n  descendants,\n  ancestors,\n  depth,\n  createNode,\n  deleteNode,\n  indentNode,\n  unindentNode,\n  updateNode,\n  dragging,\n  left,\n  right\n}) => {\n  const onKeyDownHandler = event => {\n    if (event.key === 'Tab' || (event.key === 'Tab' && event.shiftKey)) {\n      event.preventDefault();\n    }\n\n    if (event.key === 'Tab' && event.shiftKey) {\n      unindentNode({\n        id\n      });\n    } else if (event.key === 'Tab' && !event.shiftKey) {\n      indentNode({\n        id\n      });\n    }\n\n    if (event.key === 'Backspace' && data.text.length === 0) {\n      deleteNode({\n        id\n      });\n    }\n\n    if (event.key === 'Enter') {\n      const newId = uniqueId();\n      createNode({\n        id: newId,\n        parent: parent.id,\n        data: {\n          text: ''\n        }\n      });\n\n      setTimeout(() => {\n        document.querySelector(`#text-${newId}`).focus();\n      }, 50);\n    }\n\n    if (event.key === 'ArrowDown' && right) {\n      document.querySelector(`#text-${right.id}`).focus();\n    }\n\n    if (event.key === 'ArrowUp' && left) {\n      document.querySelector(`#text-${left.id}`).focus();\n    }\n  };\n\n  const textOnChange = event => {\n    updateNode({\n      id,\n      data: {\n        ...data,\n        text: event.target.value\n      }\n    });\n  };\n\n  const checkOnChange = event => {\n    const toUpdate = [...descendants, id];\n    toUpdate.forEach(id => {\n      updateNode({\n        id,\n        completed: event.target.checked\n      });\n    });\n\n    if (parent.id !== 'root') {\n      ancestors.forEach(id => {\n        updateNode({\n          id,\n          completed: false\n        });\n      });\n    }\n  };\n\n  const opacity = dragging ? 0.7 : 1;\n\n  return (\n    <ListItem style={{ backgroundColor: 'white' }}>\n      <DraggableHandle style={{ color:'#450B8F' }} />\n      <span\n        style={{\n          width: '100%',\n          marginLeft: depth * 15,\n          opacity,\n          display: 'flex',\n          flexDirection: 'row'\n        }}\n      >\n        <Checkbox\n          checked={completed}\n          value={completed}\n          color='primary'\n          // onChange={() => deleteNode({ id })}\n          onChange={updateScore(id, checked)}    //(!)\n        />\n        <TextField\n          color = 'primary'\n          id={`text-${id}`}\n          fullWidth\n          margin='normal'\n          onKeyDown={onKeyDownHandler}\n          onChange={textOnChange}\n          value={data.text}\n        />\n        <DeleteForever\n          color='primary'\n          style={{ alignSelf: 'center', cursor: 'pointer' }}\n          onClick={() => deleteNode({ id })}\n        />\n      </span>\n    </ListItem>\n  );\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    indentNode: payload => dispatch(indentNode('tasks', payload)),\n    unindentNode: payload => dispatch(unindentNode('tasks', payload)),\n    updateNode: payload => dispatch(updateNode('tasks', payload)),\n    deleteNode: payload => dispatch(deleteNode('tasks', payload)),\n    createNode: payload => dispatch(createNode('tasks', payload))\n  };\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(SortableElement(Task));\n"]},"metadata":{},"sourceType":"module"}